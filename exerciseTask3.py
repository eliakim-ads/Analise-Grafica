import pandas as pd
import streamlit as st

# --- Leitura do arquivo ---
file_path = "Base tarefa 3 - 2025.2.xlsx"
df = pd.read_excel(file_path, header=None)

# Como est√° a tend√™ncia de p√∫blico atendido ao longo do tempo;

# --- Tratamento ---
# Inicia A partir da linha 2 temos os dados (linha 0 e 1 s√£o cabe√ßalhos desorganizados) descartando essas linhas. Seleciona todos os dados a partir da terceira linha (√≠ndice 2), descartando os cabe√ßalhos in√∫teis.
# Limpa e reinicia o √≠ndice para 0, 1, 2, 3..., descartando os n√∫meros de √≠ndice originais.
dados = df.iloc[2:].reset_index(drop=True)

# Renomear a primeira coluna para "Dia"
dados = dados.rename(columns={0: "Dia"})

# Ttransformar colunas em linhas
dados_long = dados.melt(id_vars=["Dia"], var_name="Semana", value_name="Publico")

# --- Tratamento Semanal ---
# A partir da linha 2 temos os dados (linha 0 e 1 s√£o cabe√ßalhos desorganizados)
dados = df.iloc[2:].reset_index(drop=True)

# Renomear a primeira coluna para "Dia"
dados = dados.rename(columns={0: "Dia"})

# Remover valores nulos e converter para n√∫mero
dados_long = dados_long.dropna(subset=["Publico"])
dados_long["Publico"] = pd.to_numeric(dados_long["Publico"], errors="coerce")

# Criar √≠ndice de tempo fict√≠cio (semana 1, 2, 3...)
dados_long["Semana"] = dados_long.groupby("Dia").cumcount() + 1

# Agregar por semana (soma do p√∫blico atendido)
tendencia_semanal = dados_long.groupby("Semana")["Publico"].sum().reset_index()


# Tratando o Afrupamento por m√™s (4 semanas = 1 m√™s)

# Fun√ß√£o para mapear a semana para o m√™s
def mapear_mes(semana):
    if 1 <= semana <= 4:
        return "Janeiro"
    elif 5 <= semana <= 8:
        return "Fevereiro"
    elif 9 <= semana <= 12:
        return "Mar√ßo"
    elif 13 <= semana <= 16:
        return "Abril"
    return "Outro"

# Criar a coluna "M√™s" no DataFrame semanal, aplicando a fun√ß√£o mapear_mes
tendencia_semanal["M√™s"] = tendencia_semanal["Semana"].apply(mapear_mes)

# Agrupar por M√™s e somar o p√∫blico
tendencia_mensal = tendencia_semanal.groupby("M√™s")["Publico"].sum().reset_index()

# Ordenar os meses para a exibi√ß√£o correta (Janeiro, Fevereiro, Mar√ßo, Abril)
ordem_meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril"]
tendencia_mensal["M√™s"] = pd.Categorical(tendencia_mensal["M√™s"], categories=ordem_meses, ordered=True)
tendencia_mensal = tendencia_mensal.sort_values("M√™s").reset_index(drop=True)


# --- Streamlit ---
st.title("üìä Tend√™ncia de P√∫blico Atendido")

opcao = st.sidebar.selectbox(
    "Selecione Op√ß√£o",
    ("1. Tend√™ncia de P√∫blico por Semana",
     "2. Tend√™ncia de P√∫blico por Semanas",
     "3. Tend√™ncia de P√∫blico por M√™s (4 Semanas/M√™s)",
     "4.Gr√°fico de P√∫blico Total por M√™s",
     "5. Gr√°fico de Barras por Semana")
)


# --- VISUALIZA√á√ÉO SEMANAL ---
if opcao == "1. Tend√™ncia de P√∫blico por Semana":
    st.subheader("1. Tend√™ncia de P√∫blico por Semana")
    st.dataframe(tendencia_semanal[["M√™s","Semana", "Publico"]])
# Gr√°fico de linha semanal
elif opcao == "2. Tend√™ncia de P√∫blico por Semanas":
    st.subheader("2. Tend√™ncia de P√∫blico por Semanas)")
    st.line_chart(tendencia_semanal.set_index("Semana")["Publico"])

# --- VISUALIZA√á√ÉO MENSAL ---
elif opcao == "3. Tend√™ncia de P√∫blico por M√™s (4 Semanas/M√™s)":
    st.subheader("3. Tend√™ncia de P√∫blico por M√™s (4 Semanas/M√™s)")
    st.dataframe(tendencia_mensal)

# Gr√°fico de barras mensal
elif opcao == "4.Gr√°fico de P√∫blico Total por M√™s":
    st.subheader("4.Gr√°fico de P√∫blico Total por M√™s")
    st.bar_chart(tendencia_mensal.set_index("M√™s")["Publico"])

# Gr√°fico de barras semanal (opcional)
elif opcao == "5. Gr√°fico de Barras por Semana":
    st.subheader("5. Gr√°fico de Barras por Semana")
    st.bar_chart(tendencia_semanal.set_index("Semana")["Publico"])








